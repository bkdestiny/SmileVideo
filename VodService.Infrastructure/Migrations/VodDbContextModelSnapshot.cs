// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VodService.Infrastructure;

#nullable disable

namespace VodService.Infrastructure.Migrations
{
    [DbContext(typeof(VodDbContext))]
    partial class VodDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VodService.Domain.Entities.VodVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Performers")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Profile")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Scriptwriter")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("VodVideo", (string)null);
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoClassify", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassifyName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassifyType")
                        .HasColumnType("int");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("VodVideoClassify", (string)null);
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("RespondentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RootVideoCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VideoCommentTypes")
                        .HasColumnType("int");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RootVideoCommentId");

                    b.HasIndex("VideoId");

                    b.ToTable("VodVideoComment", (string)null);
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PartFile")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SortIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("VideoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("VideoId");

                    b.ToTable("VodVideoPart", (string)null);
                });

            modelBuilder.Entity("VodVideoVodVideoClassify", b =>
                {
                    b.Property<Guid>("VideoClassifiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VideoClassifiesId", "VideosId");

                    b.HasIndex("VideosId");

                    b.ToTable("VodVideoClassifyRelation", (string)null);
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoComment", b =>
                {
                    b.HasOne("VodService.Domain.Entities.VodVideoComment", "RootVideoComment")
                        .WithMany("SubVideoComments")
                        .HasForeignKey("RootVideoCommentId");

                    b.HasOne("VodService.Domain.Entities.VodVideo", "Video")
                        .WithMany("VideoComments")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootVideoComment");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoPart", b =>
                {
                    b.HasOne("VodService.Domain.Entities.VodVideo", "Video")
                        .WithMany("VideoParts")
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("VodVideoVodVideoClassify", b =>
                {
                    b.HasOne("VodService.Domain.Entities.VodVideoClassify", null)
                        .WithMany()
                        .HasForeignKey("VideoClassifiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VodService.Domain.Entities.VodVideo", null)
                        .WithMany()
                        .HasForeignKey("VideosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideo", b =>
                {
                    b.Navigation("VideoComments");

                    b.Navigation("VideoParts");
                });

            modelBuilder.Entity("VodService.Domain.Entities.VodVideoComment", b =>
                {
                    b.Navigation("SubVideoComments");
                });
#pragma warning restore 612, 618
        }
    }
}
